#!/usr/bin/env gosh
;; Generic application server script.
;;
;;  Copyright (c) 2003 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kahua-server.in,v 1.2 2003/12/26 22:44:37 shiro Exp $

;; This script would be called with a name of the actual application server
;; module name.
;;
;;    kahua-server [-c <conf-file>] <app-server> <args> ...
;; 
;; <app-server> is a module name that implements the service, such as
;; kahua.app.standard.
;;
;; This server code doesn't depend much on kahua internals, to make it
;; to reload the server code without restarting.
;;

(define-module kahua-server
  (use gauche.logger)
  (use gauche.net)
  (use gauche.selector)
  (use gauche.parameter)
  (use gauche.collection)
  (use gauche.parseopt)
  (use kahua)
  (export primary-database-name
          main-proc
          initialize-main-proc
          kahua-server-main)
  )
(select-module kahua-server)

(define primary-database-name (make-parameter #f))

(define main-proc (make-parameter (lambda (context)
 				    (error "Not initialized!"))))
(define (initialize-main-proc proc)
  (main-proc proc))


(define (handle-request header body reply-cont selector)
  (define (handle)
    (kahua-default-handler header body reply-cont default-handler
                           :eval-environment (current-module)))
  (cond ((primary-database-name)
         => (lambda (dbname) (with-db (db dbname) (handle))))
        (else (handle))))

(define (default-handler context)
   ((main-proc) context))

(define-module kahua-app-server
  (import kahua)
  (import kahua-server))

(define (load-kahua-module mod)
  (with-error-handler
      (lambda (e)
	(report-error e)
        (print "ERROR loading module")
        (exit 0))
    (lambda ()
      (load mod :environment (find-module 'kahua-app-server)))))

(define (run-server worker-id sockaddr)
  (let ((sock (make-server-socket sockaddr :reuse-addr? #t))
        (selector (make <selector>)))
    (define (accept-handler fd flag)
      (let* ((client (socket-accept sock))
             (input  (socket-input-port client :buffered? #f))
             (output (socket-output-port client))
             (header (read input))
             (body   (read input))
             )
        (handle-request header body
                        (lambda (r-header r-body)
                          (write r-header output) (newline output)
                          (write r-body output)   (newline output)
                          (flush output)
                          (socket-close client))
                        selector)))

    ;; hack
    (when (is-a? sockaddr <sockaddr-un>)
      (sys-chmod (sockaddr-name sockaddr) #o777))

    (format #t "~a\n" worker-id)
    (selector-add! selector (socket-fd sock) accept-handler '(r))
    (do () (#f) (selector-select selector))
    ))

(define (kahua-server-main args)
  (let-args (cdr args) ((conf-file "c=s" #f)
                        . mods)
    (unless (pair? mods)
      (error "usage: kahua-server [-c <conf>] <app-server> <args> ..."))
    (kahua-init conf-file)
    (load-kahua-module (car mods))
    (let* ((worker-id (kahua-init-server 
		       (car (string-split (sys-basename (car mods)) #\.))))
           (sockbase  (kahua-sockbase))
           (sockaddr  (worker-id->sockaddr worker-id sockbase))
           (cleanup   (lambda ()
                        (when (is-a? sockaddr <sockaddr-un>)
                          (sys-unlink (sockaddr-name sockaddr))))))
      (set-signal-handler! SIGINT  (lambda _ (cleanup) (exit 0)))
      (set-signal-handler! SIGTERM (lambda _ (cleanup) (exit 0)))
      (with-error-handler
          (lambda (e)
            (report-error e)
            (cleanup)
            70)
        (lambda ()
          (run-server worker-id sockaddr))))
    ))

;; Main -----------------------------------------------------

(select-module user)
(import kahua-server)

(define (main args) (kahua-server-main args))

;; Local variables:
;; mode: scheme
;; end:
