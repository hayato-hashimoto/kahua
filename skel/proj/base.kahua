;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: base.kahua,v 1.3 2006/08/14 02:02:02 cut-sea Exp $
;;

;
; <auto-update-meta>
;
(define-class <auto-update-meta> (<class>)
  ())

(define-method compute-get-n-set ((class <auto-update-meta>) slot)
  (let1 auto? (slot-definition-option slot :auto-update #f)
    (if auto?
	(let* ((acc (compute-slot-accessor class slot (next-method)))
	       (getter (lambda (o) (slot-ref-using-accessor o acc)))
	       (bound? (lambda (o) (slot-bound-using-accessor? o acc)))
	       (setter (lambda (o v)
			 (cond ((and (bound? o) (not (kahua-wrapper? v)))
				(slot-set-using-accessor! o acc v)
				(set! (ref o 'mtime) (current-date)))
			       (else
				(slot-set-using-accessor! o acc v))))))
	  (list getter setter bound? #t))
	(next-method))))

(define-class <auto-update-mixin> ()
  ()
  :metaclass <auto-update-meta>)

;
; <base>
;
(define-class <base> (<auto-update-mixin> <kahua-persistent-base>)
  ((%ctime       :allocation :persistent :init-keyword :%ctime
		 :init-form (time->seconds (date->time-utc (current-date)))
		 :auto-update #f :accessor %ctime-of)
   (ctime        :allocation :virtual :getter ctime-of
		 :slot-ref (lambda (o)
			     (time-utc->date (seconds->time (ref o '%ctime))))
		 :auto-update #f)
   (%mtime       :allocation :persistent :init-keyword :%mtime
		 :init-form (time->seconds (date->time-utc (current-date)))
		 :auto-update #f :accessor %mtime-of)
   (mtime        :allocation :virtual :accessor mtime-of
		 :slot-ref (lambda (o)
			     (time-utc->date (seconds->time (ref o '%mtime))))
		 :slot-set! (lambda (o d)
			      (set! (ref o '%mtime)
				    (time->seconds (date->time-utc d))))
		 :auto-update #f)
   (delete       :allocation :persistent :init-keyword :delete
		 :init-value #f :accessor delete-of :auto-update #t)
   ))

(define-method dead? ((obj <base>))
  (delete-of obj))

(define-method active? ((obj <base>))
  (not (delete-of obj)))

(define-method all-active-objects ((cls <kahua-persistent-meta>))
  (filter active? (make-kahua-collection cls)))

(define-method key>=? ((x <base>) (y <base>))
  (string>=? (key-of x) (key-of y)))
(define-method key<=? ((x <base>) (y <base>))
  (string<=? (key-of x) (key-of y)))
(compare-set! key>=? key<=?)

(define-method ctime>=? ((x <base>) (y <base>))
  (date>=? (ctime-of x) (ctime-of y)))
(define-method ctime<=? ((x <base>) (y <base>))
  (date<=? (ctime-of x) (ctime-of y)))
(compare-set! ctime>=? ctime<=?)

(define-method mtime>=? ((x <base>) (y <base>))
  (date>=? (mtime-of x) (mtime-of y)))
(define-method mtime<=? ((x <base>) (y <base>))
  (date<=? (mtime-of x) (mtime-of y)))
(compare-set! mtime>=? mtime<=?)

