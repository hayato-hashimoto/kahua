;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: slot-acl-base.kahua,v 1.1 2006/09/08 14:50:24 cut-sea Exp $
;;

;
; ACL metaclass for slot by slot.
; [slot keyword]
; :acl? <boolean>
;       #t : any body/time/where accessable
;       #f : any body/time/where inaccessable(default)
; :acl? <procedure>
;       mop understand predicate, and it's value is #t, then accessable.
;       of cource, it's value is #f, then inaccessable.
; :acl? <list>
;       mop understand list means role-alist of <kahua-user>
;       if (kahua-current-user) has this role-alist, then accessable.
;       ofcource, don't has this role-alist, then inaccessable.
;

;
; <slot-acl-meta>
;
(define-class <slot-acl-meta> (<class>)
  ())

(define-method compute-get-n-set ((class <slot-acl-meta>) slot)
  (letrec ((acl? (slot-definition-option slot :acl? #f))
	   (pred (cond ((boolean? acl?) (lambda () acl?))
		       ((procedure? acl?) acl?)
		       ((list? acl?)
			(lambda ()
			  (kahua-user-has-role? (kahua-current-user) acl?)))
		       (else (lambda () false-value))))
	   (false-value (slot-definition-option slot :invisible-value #f)))
    (if acl?
	(let* ((acc (compute-slot-accessor class slot (next-method)))
	       (getter (lambda (o)
			 (if (pred)
			     (slot-ref-using-accessor o acc)
			     false-value)))
	       (bound? (lambda (o)
			 (if (pred)
			     (slot-bound-using-accessor? o acc)
			     false-value)))
	       (setter (lambda (o v)
			 (if (pred)
			     (slot-set-using-accessor! o acc v)
			     false-value))))
	  (list getter setter bound? #t))
	(next-method))))

(define-class <slot-acl-mixin> ()
  ()
  :metaclass <slot-acl-meta>)

;
; <slot-acl-base>
;
(define-class <slot-acl-base> (<slot-acl-mixin>)
  ())
