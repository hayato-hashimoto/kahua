;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: validator.kahua,v 1.2 2006/07/28 13:09:39 bizenn Exp $
;;

;
; get validator for slot(now ignore)
;
;(define-method get-validate ((cls <kahua-persistent-meta>) slot)
;  (get-keyword :validate (cdr (assq slot (ref cls 'slots))) invisible))

;
; syntax for validator
;
;; define-validator's child function
;; validator generator
(define-macro (define-validator expr . body)
  (define (%separate vars-list)
    (define (%sep-vars v k m r)
      (cond ((null? r) (values v k m))
	    ((eq? (car r) :keyword) (%sep-keys v k m (cdr r)))
	    ((eq? (car r) :mvkeyword) (%sep-mvkeys v k m (cdr r)))
	    ((keyword? (car r)) (error "Illegal Validator, No such keyword supported."))
	    (else (%sep-vars (cons (car r) v) k m (cdr r)))))
    (define (%sep-keys v k m r)
      (cond ((null? r) (values v k m))
	    ((eq? (car r) :keyword) (%sep-keys v k m (cdr r)))
	    ((eq? (car r) :mvkeyword) (%sep-mvkeys v k m (cdr r)))
	    ((keyword? (car r)) (error "Illegal Validator, No such keyword supported."))
	    (else (%sep-keys v (cons (car r) k) m (cdr r)))))
    (define (%sep-mvkeys v k m r)
      (cond ((null? r) (values v k m))
	    ((eq? (car r) :keyword) (%sep-keys v k m (cdr r)))
	    ((eq? (car r) :mvkeyword) (%sep-mvkeys v k m (cdr r)))
	    ((keyword? (car r)) (error "Illegal Validator, No such keyword supported."))
	    (else (%sep-mvkeys v k (cons (car r) m) (cdr r)))))
    (%sep-vars '() '() '() vars-list))
  (define (get-request?)
    (equal? (kahua-meta-ref "REQUEST_METHOD") "GET"))
  (define (make-binds keys mvkeys)
    (append
     (map (lambda (v)
	    `(,v (kahua-context-ref ,v)))
	  keys)
     (map (lambda (v)
	    `(,v (kahua-context-ref* ,v (if (,get-request?) #f '()))))
	  mvkeys)))
  (define (default-predicate keys mvkeys)
    (cons 'and
	  (append (map (lambda (v) `(not ,v)) keys)
		  (map (lambda (v) `(not ,v)) mvkeys))))
  (receive (v k m) (%separate (cdr expr))
  `(define ,expr
     (let ,(make-binds k m)
       (cond (,(default-predicate k m) invisible)
	     (else ,@body))))))

(define (input-null? str)
  (#/^[ \t\r\n]*$/ str))

(define-validator (v:not-null :keyword value)
  (cond ((input-null? value) "Input Please.")
	(else invisible)))
(define-validator (v:number :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^[0-9]+$/ value) invisible)
	(else "Illegal Number form.")))
(define-validator (v:select :keyword value)
  (cond ((input-null? value) "Select item.")
	(else invisible)))
(define-validator (v:selects :mvkeyword value)
  (cond ((null? value) "Select some items.")
	(else invisible)))
(define-validator (v:tel :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^[0-9+-]+$/ value) invisible)
	(else "Illegal Phone Number form.")))
(define-validator (v:fax :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^[0-9+-]+$/ value) invisible)
	(else "Illegal FAX Number form.")))
(define-validator (v:card-no :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}$/ value) invisible)
	(else "Illegal Credit number form.")))
(define-validator (v:sec3 :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^[0-9]{3}$/ value) invisible)
	(else "Illegal Credit seculity code form.")))
(define-validator (v:card-name :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^[a-zA-Z ]+$/ value) invisible)
	(else "Illegal Credit name form.")))
(define-validator (v:credit-limit :keyword year month)
  (cond ((or (input-null? year) (input-null? month)) "Input Please.")
	((over? year month) "Over Credit's Limit.")
	(else invisible)))
(define-validator (v:e-mail :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^[\.a-zA-Z0-9_-]+\@[\.a-zA-Z0-9_-]+\.\w+$/ value) invisible)
	(else "Illegal E-Mail Address format.")))
(define-validator (v:zip :keyword z1 z2)
  (cond ((or (input-null? z1) (input-null? z2)) "Input both please.")
	((and (#/^[0-9]{3}$/ z1) (#/^[0-9]{4}$/ z2)) invisible)
	(else "Illegal Zip format.")))
(define-validator (v:url :keyword value)
  (cond ((input-null? value) "Input Please.")
	((#/^http:[\d\w\/?&#%:.\-+=~*]+$/ value) invisible)
	(else "Illegal URL format.")))

;
; Application specific validator.
;
; You should add define-validator below here.
;

