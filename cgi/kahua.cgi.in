#!/usr/bin/env gosh
;; Communicate to kahua application server
;; $Id: kahua.cgi.in,v 1.12 2004/01/21 05:48:34 shiro Exp $

;; This cgi script is kicked by httpd and pass through the request
;; to one of kahua servers.

;; The server to connect is determined as follows:
;;
;;  1. If PATH_INFO is given, its first component is regarded as a
;;     app-server type, and the rest is used as a cgsid.  Query
;;     parameters are ignored.   If more than one app-servers of
;;     that type are running, the client can't specify which
;;     server it will connect.
;;  2. If "x-kahua-cgsid" query parameter is given, the cgsid is
;;     taken from it and the app-server worker id is extracted.
;;  3. Otherwise, just connect to the supervisor and let it decide
;;     which app-server to handle the request.

(use gauche.net)
(use gauche.charconv)
(use gauche.logger)
(use srfi-1)
(use srfi-2)
(use www.cgi)
(use util.list)
(use rfc.cookie)
(use text.html-lite)
(use kahua.gsid)
(use kahua.config)
(use file.util)

;; Change this if you're using non-default sockbase
(define *sockbase* #f)
;(define *sockbase* "unix:/home/shiro")

;; bridge name option, mainly to pass "~user" information
(define *bridge-option* "")

(log-open "/tmp/t.log")

(define (kcv value)
  (ces-convert value "*jp" (gauche-character-encoding)))

(define (compose-reply header body)
  (receive (state cont) (get-gsid-from-header header)
    (let1 extra-headers
        (append-map (lambda (hdr)
                      (list (make-keyword (car hdr)) (cadr hdr)))
                    (filter (lambda (hdr) (not (#/^x-kahua-/ (car hdr))))
                            header))
      (list
       (apply
        cgi-header
        :cookies (construct-cookie-string
                  `(("x-kahua-sgsid" ,state
                     :path ,(sys-dirname (or (sys-getenv "SCRIPT_NAME") "/")))))
        extra-headers)
       body))))

;; load user-specific config file when PATH_INFO has ~user component.
(define (load-user-config user-dir)
        (let1 conf (string-append (expand-path user-dir)
                                  ".kahua/kahua.conf")
          (if (file-is-readable? conf)
              (begin
               (kahua-init conf #t)
               (set! *bridge-option* (string-append "/" user-dir))
               (set! *sockbase* (ref (kahua-config) 'sockbase)))
            (error "no user kahua.conf"))))

;; retrieve PATH_INFO, with processing ~user component.
;; returns #f if there's no PATH_INFO.
(define (get-path-info)
  (and-let* ((p (sys-getenv "PATH_INFO"))
             (l (cdr (string-split p #\/))))
    (when (and (pair? l) (#/^~.+/ (car l)))
      (load-user-config (car l))
      (set! l (cdr l)))
    (and (pair? l)
         (not (equal? (car l) ""))
         (filter-map (lambda (p) (if (equal? p "") #f p)) l))))

;; determine dispatch destination.
;; returns: (worker-id worker-type cont-gsid path-info)
(define (dispatch-destination params)
  (let* ((path-info   (get-path-info))
         (cont-gsid   (or (cgi-get-parameter "x-kahua-cgsid" params)
                          (if (and path-info (pair? (cdr path-info)))
                            (cadr path-info)
                            #f)))
         (worker-type (and path-info (car path-info)))
         (worker-id   (and cont-gsid (gsid->worker-id cont-gsid)))
         )
    (values worker-id worker-type cont-gsid path-info)))

;; construct absolute uri for the server root.
;; note that we can only guess the protocol scheme.
(define (server-uri)
  (let ((scheme (if (sys-getenv "HTTPS") "https" "http"))
        (name   (or (sys-getenv "SERVER_NAME") "localhost"))
        (port   (or (x->integer (sys-getenv "SERVER_PORT")) 80)))
    (format "~a://~a~a"
            scheme name
            (if (or (and (string=? scheme "http")  (= port 80))
                    (and (string=? scheme "https") (= port 443)))
                 ""
                 #`":,port"))))

;; prepare headers and dispatch the request to the appropriate server,
;; then receives the reply and forward it to the client.
(define (send-reply param)
  (receive (worker-id worker-type cont-gsid path-info)
      (dispatch-destination param)
    (log-format "~s ~s ~s" worker-id worker-type cont-gsid)
    (let* ((state-gsid (cgi-get-parameter "x-kahua-sgsid" param))
           (remote-addr (sys-getenv "REMOTE_ADDR"))
           (header     (list*
                        `("x-kahua-bridge"
                          ,(string-append (sys-getenv "SCRIPT_NAME")
                                          *bridge-option*))
                        `("x-kahua-server-uri" ,(server-uri))
                        (cond-list
                         (worker-type `("x-kahua-worker" ,worker-type))
                         (state-gsid `("x-kahua-sgsid" ,state-gsid))
                         (cont-gsid  `("x-kahua-cgsid" ,cont-gsid))
                         (path-info  `("x-kahua-path-info" ,path-info))
                         (remote-addr `("remote-addr" ,remote-addr)))))
           (sockaddr   (worker-id->sockaddr worker-id *sockbase*))
           )
      (log-format "cgsid: ~a (~a)" cont-gsid remote-addr)
      (call-with-client-socket (make-client-socket sockaddr)
        (lambda (in out)
          (write header out) (newline out)
          (write param  out) (newline out)
          (flush out)
          (let* ((header (read in))
                 (body   (read in)))
            (compose-reply header body))))
      )))
                      
(define (main args)
  (cgi-main send-reply
            :merge-cookies #t
            :on-error cgi-error-proc
            )
  0)

(define (cgi-error-proc e)
  `(,(cgi-header)
    ,(html-doctype)
    ,(html:html
      (html:head (html:title "Error"))
      (html:body (html:h1 "Error")
                 (html:p (html-escape-string (slot-ref e 'message)))
                 ))))


;; local variables:
;; mode: scheme
;; end:
