(html
 (body
  (h2 "Servers")
  (p "Kahuaランタイムシステムは、協調して動作する、複数のサーバープロセスにより構成される。")
  (ul
   (li "supervisor process (" (tt "kahua-spvr") ") は常に立ち上がっている。")
   (li "他のアプリケーションサーバ(app server)はすべて、" (tt "kahua-spvr") "の子プロセスとなる。")
   (li "" (tt "kahua-spvr") "はサーバーソケットをよく知られた箇所に開いておく (現在はunixソケットで、" (tt "/tmp/kahua/kahua") ")")
   (li "app serverのサーバソケット名は立ち上げる度に変わる。 " (tt "kahua-spvr") "が全てのapp serverのソケット名を把握している。")
   (li "異なる種類のapp serverを並行して立ち上げることができる。")
   (ul
    (li "" (tt "kahua-spvr") "はどの種類のserverがどのソケットでlistenしているかを把握している")
    (li "開発バージョンと安定バージョンのapp serverをあげておくとか。")
    (li "異なる種類のサービスを別のapp serverにやらせるとか。")
    (li "将来的にはapp serverを別マシンに振って負荷分散なんかも。")
   )
  )
  (h2 "クライアントとの通信")
  (p "ここでの「クライアント」とは、cgiブリッジとかサーバ管理用のプログラムのこと。")
  (ul
    (li "クライアントが初めて接続する際 (session initiating request) は、ソケット名がわかっている" (tt "kahua-spvr") "に接続する。")
    (ol
     (li "" (tt "kahua-spvr") "はapp serverを選んで、リクエストをフォワードする。")
     (ul
      (li "クライアントはx-kahua-workerヘッダを用いて通信したいアプリケーションサーバのタイプを指定することができる。同タイプのアプリケーションサーバが複数立ち上がっている場合は " (tt "kahua-spvr") "はその中から適当に選ぶ。")
     )
     (li "app serverは" (tt "kahua-spvr") "にリプライを返す。リプライにはセッションキー?が含まれる。")
     (li "" (tt "kahua-spvr") "はクライアントにリプライをフォワードする。")
     (li "クライアントがcgiブリッジの場合は、さらにセッションキー?を formのパラメータやcookieにエンコードして、httpd経由でWebクライアントへと返す。")
    )
    (li "ひとたびセッションが開始されたら…")
    (ol
     (li "クライアントはセッションキー?から、どのapp serverと通信しているかを知り、直接app serverへとリクエストを投げる。")
     (li "app serverはクライアントに、リプライおよび更新されたセッションキー?を返す。")
     (li "セッションが終了した場合(つまり、クライアントの状態を保持する必要がなくなった場合)は、app serverはセッションキー無しでリプライを返してもよい。その場合、次にクライアントがアクセスしてくると、セッションキーが無いので " (tt "kahua-spvr") "に接続することになる。")
    )
   )
   (p "この方式のメリットは、セッション開始後は" (tt "kahua-spvr") "をバイパスするので " (tt "kahua-spvr") "がボトルネックにならないこと。ただアーキテクチャ的には、セッションキーをapp serverによって使われる opaqueな部分と、クライアントがapp serverを見付けられるようにする部分とを持たせる必要があって、ちょっと複雑になる。")
 )
)
