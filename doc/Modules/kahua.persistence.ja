kahua.persistence

[module] kahua.persistence

このモジュールは、永続オブジェクトを実現するクラスを提供しま
す。

Persistent Object

[class] <kahua-persistent-meta>

永続オブジェクトを実現するためのメタクラスです。このメタクラ
スを使って作成されたクラスのインスタンスが永続オブジェクトと
なります。なお、下に述べる<kahua-persistent-base>を継承すれば
自動的にそのクラスのメタクラスに<kahua-persistent-meta>は含ま
れます。

このメタクラスを使って作成されたクラスでは、:allocationスロッ
トオプションに :persistentという値を与えることが出来ます。
:persistentな allocationを持つスロットが永続化対象となりま
す。

今のところ、永続化されるのは以下のオブジェクトです。

 ・ boolean, number, string, symbol, keyword, null
 ・ 永続化可能オブジェクトを要素に持つlist, vector
 ・ 他の永続オブジェクトへの参照

また、永続クラスには :source-id キーワードでソースIDを与える
ことができます。これは永続クラスの世代管理に使われます。詳し
くはPersistenceGenerationを参照して下さい。

[class] <kahua-persistent-base>

永続オブジェクトを作成するクラスのベースクラスです。永続オブ
ジェクトを実現したいクラスはこのクラスを継承する必要がありま
す。このクラスを継承することで、メタクラスに
<kahua-persistent-meta>が追加されます。

このベースクラスは次のスロットを持ちます。

[slot] id

データベース内のこのクラス内でユニークなIDです。

[slot] db

この永続オブジェクトを格納しているデータベース(<kahua-db>のイ
ンスタンス) を参照しています。

[method] persistent-initialize (obj <kahua-persistent-base>) initargs

永続オブジェクトの初期化メソッドです．
initializeメソッドが永続オブジェクトの実体化の度に呼ばれるのに対して，
persistent-initializeメソッドは永続オブジェクトを作成する時に一度だけ
呼ばれます．
ユーザは `persistent-initialize' メソッドを特定化してオブジェクトの初期化
の方法をカスタマイズできます．


[method] key-of (obj <kahua-persistent-base>)

データベースのキーに使う文字列を返します。デフォルトメソッド
ではidが使われます。クラスによっては、このメソッドを特化する
ことでキーをカスタマイズできます。但し、メソッドを特化するク
ラスはキーがユニークになることを保証しなければなりません。

[method] touch-kahua-instance! (obj <kahua-persistent-base>)

通常、永続オブジェクトは、プログラム中でslot-set!等により変更
を受けた際にマークされ、トランザクション終了時に変更がデータ
ベースに書き戻されます。

この手続きは、永続オブジェクトobjの内容を変えずにただマークだ
けを付けて、変更がデータベースに書き戻されるようにします。

永続クラスの世代が上がった時に、永続インスタンスの世代もまと
めて合わせたい時などに使えます。

[procedure] kahua-serializable-object? obj

Schemeオブジェクトobjがシリアル化可能か、すなわち永続オブジェ
クトのスロット値としてストア可能かどうかを返す述語です。

シリアル化可能でないオブジェクトを永続オブジェクトにストアし
ようとするとエラーとなります。そのエラーを未然に回避するのに
使えます。

[class] <kahua-persistent-metainfo>

永続クラス、つまり<kahua-persistent-meta>メタクラスのインスタ
ンスに関する情報を管理するためのクラスです。このクラス自身、
<kahua-persistent-base>を継承しており、永続クラスになっていま
す。各永続クラスに対し、<kahua-persistent-metainfo>のインスタ
ンスが作成され、クラスの世代や世代間の変換規則等が保持されま
す。

永続データベースに関するメタ情報を扱うアプリケーションでない
限り、通常はこのクラスにアクセスする必要は無いでしょう。

Querying Persistent objects

[method] find-kahua-class name

シンボルnameを名前に持つ永続クラスを返します。そのようなクラ
スが無ければエラーとなります。

[procedure] find-kahua-instance class key

この手続きはデータベースがアクティブである時にしか呼べませ
ん。

クラス(クラスオブジェクト)とキー(文字列)から該当する永続イン
スタンスを探して返します。該当するインスタンスが無い場合は#f
を返します。

[class] <kahua-collection>

永続オブジェクトの集合を扱うクラスです。 <collection>を継承し
ているので、gauche.collectionをuseしておけば mapやfoldが使え
ます。

[method] make-kahua-collection ((class
<kahua-persistent-meta>))

この手続きはデータベースがアクティブである時にしか呼べませ
ん。

永続クラスclassの全てのインスタンスを<kahua-collection>に入れ
て返します。

Database

[class] <kahua-db>

永続オブジェクトを格納するデータベースです。

[macro] with-db (db path) body ...

pathにあるデータベースをオープンし、データベースオブジェクト
(<kahua-db>インスタンス)を変数dbに束縛した状態で、 body ...
を評価します。body...が正常終了すれば、 dbに加えられた変化を
コミットし、dbをクローズします。 bodyがエラーを投げた場合は変
化をアボートし、dbをクローズします。

bodyを実行中のダイナミックエクステントを指して、 「データベー
スがアクティブである」と言います。

バックエンドのデータベースは、pathの構文により指定できます。
デフォルトでは、ファイルシステムを使ったデータベースシステム
が使われます。kahua.conf (kahua.config参照)で指定される
working-directory以下にpathという名のディレクトリが作られ、そ
の中に永続データが格納されます。

path が "mysql:" または "pg:" で始まっている場合は、それぞれ
MySQL, PostgreSQLをバックエンドにしたデータベースとなります。
この時、path は以下のような構文を満たさなければなりません。

  mysql:user:password:options
  pg:user:password:options

user はDBのユーザ名、passwordはパスワード、そして optionsはDB
接続時に与えるオプションです。password, options は無ければ省
略可能です。

kahua.persistenceは、外部データベースを使う際にはdbiモジュー
ル (DBI参照)をオートロードします。システムにdbi/dbdがインスト
ールされていなければなりません。デフォルトのファイルシステム
データベースを使う場合にはdbi/dbdは不要です。

[procedure] kahua-db-sync db

データベースdbにこれまで加えられた変更をコミットします。コミ
ットした情報は、この後でエラーが発生してもロールバックされま
せん。

Metainformation

どのような永続クラスがデータベースに格納されているかの事前の
知識無しに、データベースに格納された永続クラスの情報を取り出
すAPIがいくつか提供されます。

[procedure] kahua-persistent-classes-in-db

現在のデータベース内にある永続クラスのクラス名(シンボル)のリ
ストを返します。

[procedure] kahua-persistent-class-generation class-name

現在のデータベースから、名前class-name(シンボル)で示される永
続クラスを探し、その最新の世代番号(整数)を返します。指定のク
ラスが無い場合は#fが返ります。

[procedure] kahua-persistent-class-definition class-name
[generation]

現在のデータベースから、名前class-name(シンボル)で示される永
続クラスの定義を取り出し、define-classフォームを作成して返し
ます。返されたフォームをevalすると、呼び出したプロセス内でそ
の永続クラスが使えるようになります。

複数の世代がデータベースに格納されている場合、デフォルトでは
最新の定義が得られますが、generation引数により世代を指定する
こともできます。

class-nameに対応する永続クラスが無い場合、また、 generationに
対応する世代が無い場合は#fが返されます。

なお、この関数が返すフォームは、その永続クラスを作ったプロセ
スの持つクラス定義と完全に一致するわけではないことに注意して
下さい。データベースには、クラスを永続化するために必要十分な
情報しか格納されていません。この関数が返すクラス定義は、元の
定義にくらべて次のような違いがあります。

 ・ クラスの継承情報は失われます。返されるクラスは
    <kahua-persistent-base>を直接継承します。
 ・ 非永続スロットの情報は含まれません
 ・ 永続スロットのスロットオプションは :allocation オプション
    を除いて失われます。
 ・ :source-id以外の初期化オプションは失われます。
 ・ スロットの順序は保存されません。

このような違いがあっても、データベースのメタ情報を扱うアプリ
ケーションにとっては、クラス定義情報は有用でしょう。

