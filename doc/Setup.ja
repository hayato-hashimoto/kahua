;; Setup  -*- coding: euc-jp -*-
;;
;; Copyright (c) 2003-2006 Scheme Arts, L.L.C., All rights reserved.
;; Copyright (c) 2003-2006 Time Intermedia Corporation, All rights reserved.
;;
;; $Id: Setup.ja,v 1.15 2006/12/13 08:45:39 bizenn Exp $

* Kahuaをセットアップする


##(toc)

** 準備

*** Gauche のインストール

Kahuaを動かすためには、0.8.8 以降のpthreadをサポートした
[http://practical-scheme.net/gauche/index-j.html Gauche]
がインストール済みである必要があります。
{{{
$ gosh -V
Gauche scheme interpreter, version 0.8.8 [utf-8,pthreads]
}}}
なお、0.8.8リリースには、Schemeスクリプト内でエラー/例外が発生し、
かつスクリプト内でそのエラー/例外が補足されない場合、エラーメッセージを
表示せずに終了してしまうバグがあります。

http://sourceforge.net/mailarchive/forum.php?thread_id=30949517&forum_id=2043

このパッチを適用してからGaucheをビルドすることを推奨します。

適切なバージョンの Gauche がインストールされていなければ、
インストールしてください。

----

** とりあえず試す

*** 自分のHOMEの下にインストール

とりあえずKahuaを体験してみたいのなら、自分のHOMEの下にインストールして
しまうことをお薦めします。後述のようなパーミッションやユーザ/グループの
設定が不要になります。
{{{
% tar xvzf Kahua-0.9.tgz
% cd Kahua-0.9
% ./configure --prefix=${HOME}/kahua --with-staticdir=${HOME}/public_html/kahua
% make
% make check
% make install
% make install-examples
}}}

これでKahuaを動かすのに必要なもの全てとサンプルアプリケーションとが、
${HOME}/kahua と ${HOME}/public_html/kahuaの下にインストールされます。
${HOME}/kahua/bin にPATHを通しておくと便利でしょう。
また、Kahua内蔵のHTTPdを使えば、ApacheなどのWebサーバを別途用意する
必要はありません。

*** Kahuaを起動する

Kahuaを起動するには、以下のコマンドを実行します。
{{{
% ($HOME/kahua/bin/kahua-spvr --httpd localhost:8888 >>/tmp/kahua-error.log &)
}}}
ポート番号は非特権ポートから適当に決めて下さい。--httpd の引数として
ポート番号だけを指定した場合は、0.0.0.0(および可能なら[::])にサーバ
ソケットがbindされます。適切にフィルタリングをしていない場合は外部から
自由にアクセスできてしまうのでご注意ください。

ブラウザで http://localhost:8888/ にアクセスしてみましょう。
サンプルアプリケーションのlambdabooksが表示されたら成功です。
いろいろ遊んでみてください。サンプルアプリケーションのソースコードは
$HOME/kahua/var/kahua/checkoutの下にアプリケーション名と同じ名前の
ディレクトリごとに置かれています。なお、kahua-shell を使ってワーカ
プロセスに接続したいときは、後述の「開発アカウントを作成する」を参照
してください。

----

** きちんとインストールする

システムの公共の場所にroot権限でKahuaをインストールする際には、
多少の手順と、Kahuaの仕組みを少し覗いてみる必要があります。

*** Kahuaの役割分担を理解する

Kahuaは、大きく3つに分類されるプロセス群が、それぞれの権限
(UNIXユーザ)で、相互に通信しながら動作します。

# Kahuaサーバ群(kahua-spvr、kahua-server、kahua-keyserv)
# Kahuaブリッジ(kahua.cgi, kahua.fcg, kahua-httpd)
# Kahua管理者(kahua-admin)および開発者(kahua-shell)

この3者は、同じUNIXドメインソケットを読み書きできる必要があります。
また、Kahuaサーバ群とKahuaブリッジとは、同じ場所でテンポラリファイル
の読み書きができる必要があります。

*** グループ kahua を作成する

3つの役割のプロセス同士がUNIXドメインソケットを通じてやり取りをする
ためには、それぞれのプロセスの実行ユーザが同一のグループに属している
必要があります。そのためのグループ ''kahua'' を新規に登録しましょう。
root権限が必要です。
{{{
# groupadd kahua
}}}

OSによっては違うコマンドを使う必要があるかも知れません。
OSのマニュアルを参照してください。

*** ユーザ kahua を作成する

上記の3種類のプロセスのうち、Kahuaサーバ群は一体となって動きます。
セキュリティ上、Kahuaサーバ群は独自のユーザ権限の下で動かすことが
望ましいでしょう。ここでは、そのユーザを ''kahua'' として新規に作成します。
プライマリグループは上記で作成したグループ kahua でいいでしょう。
{{{
# useradd -g kahua kahua
}}}

*** グループ kahua に他のユーザを登録する

次に、Kahuaブリッジの実行ユーザとKahua管理者/開発者であるユーザをkahua
グループに登録しましょう。

Kahuaブリッジのうち、kahua.cgiやkahua.fcgは、通常CGIスクリプトを実行する
Webサーバと同じ権限で動作します(ここではsuEXECは使っていないものとします)。
Webサーバの実行ユーザが www だとすると、
{{{
# usermod -G kahua www
}}}
を実行します。この変更をWebサーバの動作に反映させるには、いったんWebサーバを
再起動する必要があります。なお、Kahua内蔵のHTTPdを使用し、外部のWebサーバを
使用しない場合はこの設定は不要です。

次に、Kahua管理者/開発者について考えます。これはおそらく、あなた自身
(+他の誰か)のログインユーザでしょう。例えばあなたが taro だとすると、
{{{
# usermod -G kahua taro
}}}
で kahua グループに taro を追加することができます。

*** ビルドする

ビルドといっても、KahuaはほとんどがGaucheスクリプトであり(一部shスクリプト)、
./configure のオプションに気をつけさえすれば特に問題はありません。以下は
筆者があるサイトにKahuaをインストールするためにビルドを行う様子です。
{{{
% tar xzvf Kahua-0.7.tgz
% cd Kahua-0.7
% ./configure \
    --with-kahua-user=kahua --with-kahua-group=kahua --with-cgi-user=www \
    --prefix=/usr/local/kahua \
    --sysconfdir=/usr/local/etc \
    --localstatedir=/var/local \
    --with-cgidir=/var/local/www/cgi-bin \
    --with-cgilogdir=/var/log/kahua/cgi \
    --with-staticdir=/var/local/www/htdocs/kahua-data \
    --with-fastcgi=yes
% make
}}}
makeはGNU makeでもBSD makeでも大丈夫なはずです。もし、BSD makeでうまく
行かない場合は GNU make を試してみてください。そして、BSD makeでどう
うまくいかなかったのかをしらせてください。

**** configureのオプション

configureのオプションの詳細については、
{{{
% ./configure --help
}}}
で見ることができますが、ここでは特に設定することが多いであろうオプション
について解説します。

{{{
 --with-kahua-user

     Kahuaサーバ群を動かすためのユーザ名。デフォルトは指定なし。

 --with-kahua-group

     Kahuaサーバ群を動かすユーザ、Kahua管理者/開発者、Kahuaブリッジの
     実行ユーザが所属しなければならないグループ名。デフォルトは指定なし。

 --with-cgi-user

     Kahuaブリッジ(kahua.cgi/kahua.fcg)の実行ユーザ名。通常はCGIを起動
     するWebサーバの実行ユーザになる。デフォルトは指定なし。

 --with-cgidir

     KahuaブリッジであるCGIスクリプトのインストール先となるディレクトリ。
     Webサーバの設定による。デフォルトでは ${libexecdir}/kahua となる。

 --with-cgilogdir

     KahuaブリッジであるCGIスクリプトがログを出力するディレクトリ。
     指定したディレクトリはCGIスクリプトの実行権限で書き込みができな
     ければならない。デフォルトは ${localstatedir}/kahua/cgilog。

 --prefix, --exec-prefix, ...

     configureの標準オプション。設定することが多いのは--prefixの他、
     --localstatedir、--sysconfdirあたり。${localstatedir}/kahua に
     Kahuaアプリケーションやデータベース、ログディレクトリなどが配置
     され、標準の設定ファイルが${sysconfdir}/etc/kahua.conf に置かれる。

 --with-staticdir

     Kahuaサーバ群が静的コンテンツを探すディレクトリ。デフォルトは
     /var/www/kahua。この値はインストール後設定ファイルで変更できる。

 --with-fastcgi

     FastCGI対応のKahuaブリッジ(kahua.fcg)をインストールする。この
     オプションを使うためには、あらかじめ Gauche-fastcgi をインスト
     ールしておく必要がある。
}}}

*** セルフテスト

以下のコマンドでテストを実行します。
{{{
% make check
}}}

*** インストール

以下のコマンドでKahuaシステムとして必要なファイル群をインストールします。
{{{
% su
# make install
}}}

サンプルアプリケーションをインストールする際は root ではなく、Kahua
管理者/開発者の権限で行います。
{{{
% make install-examples
}}}
この後、サンプルとしてインストールされたデータベースディレクトリの
オーナー/グループ/パーミッションを以下のように変更します。上記の
configureオプションでビルドをしたのであれば、データベースディレクトリ
は /usr/local/kahua/var/kahua/db になります。
{{{
% su
# chown -R kahua:kahua /usr/local/kahua/var/kahua/db*
}}}
最後の*(アスタリスク)をお忘れなく。

*** Kahuaサーバ群の起動

お疲れさまでした。ようやくKahuaを起動する準備が整いました。
Kahuaサーバ群をkahuaユーザ権限で起動しましょう。
{{{
# su kahua -c ${prefix}/bin/kahua-spvr
}}}
このコマンドでKahuaスーパバイザ(kahua-spvr)が起動し、スーパバイザが
必要に応じてワーカ(kahua-server)やキーサーバ(kahua-keyserv)を起動
します。内蔵HTTPdつきで起動するなら、
{{{
# su kahua -c ${prefix}/bin/kahua-spvr --httpd localhost:8888
}}}
のようにします。バックグラウンドで動かしたい場合は
{{{
# su kahua -c "(${prefix}/bin/kahua-spvr >>${localstatedir}/kahua/logs/kahua-error.log 2>&1 &)"
}}}
のようにすればいいでしょう。

現在のKahuaには、各種OSのrcスクリプト(init.dスクリプト)にこのような
起動コマンドを登録する仕組みは(まだ)ありません。上記のコマンドラインを
参考に作成するか、daemontools を使うとよいでしょう。

----

** 開発ユーザの作成

Kahuaでは、kahua-shellというコマンドを使い、動作中のワーカプロセスに接続して
式を評価したり、内部の状態を変更したりすることができます。kahua-shellは
ワーカに接続する際、「開発ユーザ」の認証を行いますので、まずはそのための
開発ユーザを作成する必要があります。Kahuaの開発ユーザは、管理者/開発者の
UNIXログインアカウントとは独立に、Kahuaシステムの内部に作成することに
注意してください。

まず、Kahuaサーバ群を管理するためのコマンドであるkahua-adminを起動します。
以降、kahua-adminコマンドがインストールされているディレクトリにパスが通って
いるものとします。
{{{
% kahua-admin
spvr>
}}}
このプロンプトに以下のコマンドを入力します。
{{{
spvr> adduser ユーザ名 パスワード
done
spvr>
}}}
例えば、追加したいユーザ名が taro、パスワードが secret の場合は、
{{{
spvr> adduser taro secret
done
spvr> lsuser
("steel" "sussman" "taro")
spvr>
}}}
となるでしょう。steel、sussmanというのはサンプルとして登録されているユーザ
なので、削除してしまってかまいません。
{{{
spvr> deluser steel
done
spvr> deluser sussman
done
spvr>
}}}
EOF(Ctrl-D)を入力すれば kahua-admin を抜けられます。

さぁ、これで kahua-shell を使えるようになりました。試してみましょう。
{{{
% kahua-shell
Welcome to Kahua.
username: taro
password: 
wno type         since        wid
  0 lambdabooks  Sep 27 16:19 gje:2ft3z
  1 wiki-iki     Sep 27 16:19 dej:inai
  2 login        Sep 27 16:19 90j:5hwlk
select wno> 0

lambdabooks(gje:2ft3z)> (map (cut ref <> 'login-name) (make-kahua-collection <kahua-user>))
("admin" "guest")
lambdabooks(gje:2ft3z)>
}}}
サンプルアプリケーションのlambabooksに接続し、式を評価したところです。

----

** サイトバンドルを使用する

Kahua 0.8から、サイトバンドルという機構が組み込まれました。Kahuaサーバ群が
動作するワーキングディレクトリを抽象化したもので、単一のKahuaインストール
ベースの下で、複数のKahuaサーバ群(kahua-spvrとその配下のサーバ群)を簡単に
動かすことができるようになります。

*** サイトバンドルを作る

作成するサイトに対応したkahua-spvrの実行権限で以下のコマンドを実行します。
{{{
% kahua-package create /var/tmp/kahua
}}}
これでサイトのスケルトンが作成されます。ディレクトリ構成は以下のように
なります。
{{{
% find /var/tmp/kahua
/var/tmp/kahua
/var/tmp/kahua/app
/var/tmp/kahua/app-servers
/var/tmp/kahua/database
/var/tmp/kahua/etc
/var/tmp/kahua/etc/kahua.conf
/var/tmp/kahua/etc/user.conf
/var/tmp/kahua/logs
/var/tmp/kahua/plugins
/var/tmp/kahua/run
/var/tmp/kahua/socket
/var/tmp/kahua/static
/var/tmp/kahua/tmp
}}}
標準のワーキングディレクトリの構成に似ていますが、いくつか変更を加えて
います。

# app: 標準のワーキングディレクトリでは歴史的経緯から「checkout」。
アプリケーションごとにこの下にサブディレクトリを掘り、アプリケーション
のソースファイルを配置する。
# database: 標準のワーキングディレクトリではワーキングディレクトリ直下に
置かれていたファイルシステム系データベースのディレクトリが置かれる。
# etc: サイトバンドル上で起動するkahua-*スクリプト群が参照する設定ファイル
や開発ユーザデータベースが配置される。サイトバンドル使用時、kahua-*
スクリプトは標準の設定ファイルを参照しない。
# logs: ログファイルの出力先。
# plugins: プラグインファイルを配置する。現状では、Kahuaとともに
インストールされる標準プラグインをサイトバンドル内で使用したい時は、
ここにコピーする必要がある。
# run: PIDファイルの出力先。
# socket: Kahuaサーバ群が通信に使用するUNIXドメインソケットの配置場所。
# static: 静的コンテンツの配置先。
# tmp: テンポラリディレクトリ。

*** サイトバンドル上でkahua-spvrを動かす

サイトバンドルを作成した権限で以下のように起動します。
{{{
% kahua-spvr -S /var/tmp/kahua --httpd 8889
}}}
-Sの後ろに来るサイトバンドルへのパスはフルパスで指定してください。
このkahua-spvrにkahua-adminを接続したいときは、
{{{
% kahua-admin -S /var/tmp/kahua
}}}
と起動します。

なお、毎回コマンドラインオプションを指定するのが面倒であれば、
環境変数kAHUA_DEFAULT_SITEにデフォルトで使用するサイトバンドルを
指定することができます。
{{{
% export KAHUA_DEFAULT_SITE=/var/tmp/kahua
% kahua-spvr --httpd 8889
}}}

この機構の導入にともない、ユーザ専用モードは廃止しました。

----

** CVSからのビルド

CVSリポジトリから取得したソースからビルド/インストールを行うには、
autoconf 2.54以降が必要になります。また、CVS HEADを試すのなら、
GaucheもCVS HEADのものを使用した方がよいでしょう。

CVSからチェックアウトしたソースからビルドするには、以下のコマンドで
configureスクリプトを生成する必要があります。

{{{
% ./DIST gen
}}}

あとはリリース版のビルド/インストールと同様の手順です。
