;;-*-Scheme-*-
;; Example kahua application (lambdabooks)
;;
;;  Copyright (c) 2003 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: login.kahua,v 1.2 2003/12/21 15:25:44 nobsun Exp $

;; User login management ----------------------------------------
;;   Receives two continuation procedure.
;;   transient-cont is used to display transient screen.
;;   final-cont is called when user's login succeeded (or abandoned).
;;
(define (user-box context transient-cont final-cont)
  (define (login-dialog logname pass context)
    (transient-cont 
     `(,(if logname
          '(p "ユーザー名、またはパスワードが違います")
          '(p "ユーザー登録がお済みの方は、ユーザー名とパスワードを入力して「ログイン」ボタンをクリックして下さい"))
       (form/cont
        (@@ (cont ,login-check))
        (table
         (tr (th "ユーザー名")
             (td (input (@ (type "text") (name "logname")
                           (value ,(or logname ""))))))
         (tr (th "パスワード")
             (td (input (@ (type "password") (name "pass")
                           (value ,(or pass ""))))))
         (tr (th)
             (td (input (@ (type "submit") (name "submit")
                           (value "ログイン")))))))
       (p "ユーザー登録がお済みでない方は、"
          (a/cont (@@ (cont ,(cut new-user #f #f <>))) "新規ユーザー登録")
          "で登録を行うか、"
          (a/cont (@@ (cont ,(lambda (context) (final-cont '() context))))
                  "ログインせずにサイトを利用する")
          "ことができます。"
          "(ログインしない場合は、一部の機能が使えません)"))
     context))

  (define (login-check context)
    (let ((logname (kahua-context-ref context "logname"))
          (pass    (kahua-context-ref context "pass")))
      (if (kahua-check-user logname pass)
        (begin
          (set! (kahua-current-user context) logname)
          (final-cont '() context))
        (login-dialog logname pass context))))

  (define (new-user logname pass context)
    (transient-cont
     `(,(if logname
          (if pass
            '(p "2つのパスワードが異なります。同じパスワードを入力して下さい。")
            '(p "そのユーザー名は既に登録されています。異なるユーザー名を選んで下さい。"))
          '(p "ユーザー名とパスワードを選び、入力して下さい。パスワードは確認のため2度入力して下さい。"))
       (form/cont
        (@@ (cont ,user-registration))
        (table
         (tr (th "ユーザー名")
             (td (input (@ (type "text") (name "logname")
                           (value ,(or logname ""))))))
         (tr (th "パスワード")
             (td (input (@ (type "password") (name "pass")
                           (value "")))))
         (tr (th "パスワード(確認)")
             (td (input (@ (type "password") (name "pass2")
                           (value "")))))
         (tr (th)
             (td (input (@ (type "submit") (name "submit")
                           (value "登録")))))))
       (p "プライバシーポリシー：本サイトはデモ用のサイトであり、あなたの入力したデータはテスト目的にのみ使用され、テスト終了時に破棄されます。"))
     context))

  (define (user-registration context)
    (let ((logname (kahua-context-ref context "logname"))
          (pass    (kahua-context-ref context "pass"))
          (pass2   (kahua-context-ref context "pass2")))
      (cond
       ((kahua-find-user logname)
        (new-user logname #f context)) ;; user $logname already exists
       ((not (equal? pass pass2))
        (new-user logname pass context)) ;; passwords don't match
       (else
        (kahua-add-user logname pass)
        (kahua-db-sync)
        (set! (kahua-current-user context) logname)
        (final-cont '() context)))))

  (define (logout context)
    (set! (kahua-current-user context) #f)
    (final-cont '() context))

  (let ((user (kahua-current-user context)))
    (if user
      `(table (tr (td "Welcome, " ,(ref user 'login-name)))
              (tr (td (@ (style "font-size:small; text-align:right"))
                      (a/cont (@@ (cont ,logout)) "logout"))))
      `(a/cont (@@ (cont ,(cut login-dialog #f #f <>)))
               "ログイン/新規登録")))
  )

