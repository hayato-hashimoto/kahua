;; -*- coding: utf-8 ; mode: kahua -*-
;; Example kahua application (lambdabooks)
;;
;;  Copyright (c) 2003-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: review.kahua,v 1.7 2007/06/27 08:34:03 bizenn Exp $

(define-class <review> (<kahua-persistent-base>)
  ((about     :init-keyword :about  :init-value #f
              :allocation :persistent :index :any) ;; back link to <book>
   (author    :init-keyword :author :init-value #f
              :allocation :persistent) ;; <user>
   (evaluation :init-keyword :evaluation :init-value 1
               :allocation :persistent) ;; 1-5
   (comment   :init-keyword :comment :init-value ""
              :allocation :persistent)
   ))

(define-method format-review ((self <review>) cont)
  (define (delete-review)
    (let* ((rev  (find-kahua-instance <review> (key-of self)))
           (book (and rev (ref rev 'about))))
      ;; NB: currently, kahua.persistence can't delete an instance.
      ;; we just remove invalidate its data and links so that it
      ;; becomes invisible.
      (when rev
        (set! (ref rev 'author) #f)
        (set! (ref rev 'about) #f))
      (when book
        (set! (ref book 'reviews)
              (delete rev (ref book 'reviews))))
      (kahua-db-sync)
      (if book
        (show-reviews (key-of book) cont)
        (cont '()))))
  
  (list
   (tr: (@: (style "border-bottom: 2px solid black"))
        (td:
         (apply table:
          (tr: (th: (@: (style "background-color:#dddddd; width:7em"))
		    "レビューア")
	       (td: ;(@: (style "width:35em"))
                  (cond ((ref self 'author) => (cut ref <> 'login-name))
			(else "guest"))))
          (tr: (th: (@: (style "background-color:#dddddd")) "評価(1〜5)")
	       (apply td: (make-list (ref self 'evaluation) "★")))
          (tr: (th: (@: (style "background-color:#dddddd")) "コメント")
	       (td: (ref self 'comment)))
          (cond-list
	   ((and (kahua-current-user)
		 (equal? (key-of (kahua-current-user))
			 (key-of (ref self 'author))))
	    (tr: (th:) (td: (a/cont: (@@: (cont delete-review))
				     "[レビューを削除]")))))))))
  )

(define (show-reviews key cont)
  (let ((book (find-kahua-instance <book> key)))
    (if (not book)
      (cont (list (p: "(書籍データがありません)")))
      ((lister (map key-of (ref book 'reviews))
	       (lambda (key count)
		 (format-review (find-kahua-instance <review> key)
				cont))
	       :table-attrs (@: (style "border-collapse: collapse; width:95%")))
       (lambda (nodes)
	 (cont (cons
		(h2: (ref book 'title) "に対する読者レビュー")
		(append nodes
			(list
			 (a/cont: (@@: (cont books (key-of book)))
				  "[書籍情報に戻る]")
			 (book-review-link (key-of book) cont))))))))))

(define (write-review key cont)
  (define (commit-review)
    (let ((book (find-kahua-instance <book> key))
          (user (kahua-current-user))
          (eval (kahua-context-ref "evaluation"))
          (comment (kahua-context-ref "comment")))
      (if book
        (begin
          (set! (ref book 'reviews)
                (cons 
                 (make <review> :about book :author user
                       :evaluation (or (string->number eval) 3)
                       :comment comment)
                 (ref book 'reviews)))
          (kahua-db-sync)
          (show-reviews key cont))
        (cont (list (p: "(書籍データがありません)"))))))
  
  (let ((book (find-kahua-instance <book> key))
        (user (kahua-current-user)))
    (if (not book)
      (cont (list (p: "(書籍データがありません)")))
      (cont (list
	     (h2: (ref book 'title) "についてのレビューを書く")
	     (form/cont:
	      (@@: (cont commit-review))
	      (table:
	       (tr: (th: "レビューア")
                    (td: (if user (ref user 'login-name) "guest")))
	       (tr: (th: "評価")
                    (td: (apply select: (@: (name "evaluation"))
                                (map (lambda (s) `(option ,s))
				     '("1" "2" "3" "4" "5")))))
	       (tr: (th: "コメント")
                    (td: (textarea: (@: (name "comment") (cols 40)))))
	       (tr: (th:)
                    (td: (input: (@: (type "submit") (name "submit")
				     (value "レビューを送信"))))))))
            )))
  )

