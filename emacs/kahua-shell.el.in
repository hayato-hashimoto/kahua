;;
;; Kahua client interface for Emacs
;;
;;  Copyright (c) 2003 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003 Time Intermedia Corporation, All rights reserved.
;;
;; $Id: kahua-shell.el.in,v 1.7 2006/05/13 01:55:35 bizenn Exp $
;;

(require 'comint)
(require 'cmuscheme)

(defvar kahua-worker-prompt-regex "^select wno> "
  "Regexp to recognise select woker prompt")

(define-derived-mode kahua-mode scheme-mode "Kahua mode"
  "Major mode for editing kahua code.
Editing commands are similar to those of 'scheme-mode'."
  (make-local-variable 'scheme-buffer)
  (setq scheme-buffer "*kahua-shell*"))

(defun kahua-select-worker-prompt (string)
  "Prompt in the minibuffer for selecting worker"
  (if (string-match kahua-worker-prompt-regex string)
      (comint-simple-send "*kahua-shell*" (read-string "select worker: " nil))))

(defun run-kahua-shell (host user)
  (interactive
   (let* ((host (if kahua-ssh-mode
                    (read-string "hostname: " kahua-default-server) ""))
          (user (if (and kahua-ssh-mode (not (string= host "")))
                    (read-string "username: " kahua-default-user) "")))
     (list host user)))

  (unless (get-buffer "*kahua-shell*")
    (let ((add-password-hook?
           (not (memq 'comint-watch-for-password-prompt
                      comint-output-filter-functions))))
      (set-buffer (get-buffer-create "*kahua-shell*"))
      (make-local-hook 'comint-output-filter-functions)
      (add-hook 'comint-output-filter-functions
                'kahua-select-worker-prompt nil t)
      (when add-password-hook?
        (add-hook 'comint-output-filter-functions
                  'comint-watch-for-password-prompt nil t)))
    )
  (if (not (comint-check-proc "*kahua-shell*"))
      (let* ((use-ssh          (and kahua-ssh-mode (not (string= host ""))))
             (program          (if use-ssh "ssh" kahua-shell-command))
             (kahua-shell-args (if (string= kahua-user-mode "")
                                   '() (list "-user" kahua-user-mode)))
             (args             (if use-ssh
                                   `(,@kahua-ssh-opts
                                     ,(if (string= user "")
                                          host (concat user "@" host))
                                     ,kahua-shell-command
                                     ,@kahua-shell-args)
                                 kahua-shell-args)))
        (set-buffer (apply 'make-comint "kahua-shell" program nil args))
        (inferior-scheme-mode)))
  (pop-to-buffer "*kahua-shell*")
  (make-local-variable 'scheme-program-name)
  (setq scheme-program-name "kahua-shell")
  (make-local-variable 'scheme-buffer)
  (setq scheme-buffer "*kahua-shell*")

  )

(provide 'kahua-shell)

;; Local variables:
;; mode: emacs-lisp
;; end:
