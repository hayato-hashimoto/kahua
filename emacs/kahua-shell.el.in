;;
;; Kahua client interface for Emacs
;;
;;  Copyright (c) 2003 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003 Time Intermedia Corporation, All rights reserved.
;;
;; $Id: kahua-shell.el.in,v 1.5 2005/12/18 12:59:45 cut-sea Exp $
;;

(require 'comint)
(require 'cmuscheme)

(defvar kahua-worker-prompt-regex "^select wno> "
  "Regexp to recognise select woker prompt")

(defun kahua-select-worker-prompt (string)
  "Prompt in the minibuffer for selecting worker"
  (if (string-match kahua-worker-prompt-regex string)
      (comint-simple-send "*scheme*" (read-string "select worker: " nil))))

(add-hook 'comint-output-filter-functions 'kahua-select-worker-prompt)


(defun run-kahua-shell (host user)
  (interactive
   (let* ((host (if kahua-ssh-mode
                    (read-string "hostname: " kahua-default-server) ""))
          (user (if (and kahua-ssh-mode (not (string= host "")))
                    (read-string "username: " kahua-default-user) "")))
     (list host user)))

  (if (not (comint-check-proc "*scheme*"))
      (let* ((use-ssh          (and kahua-ssh-mode (not (string= host ""))))
             (program          (if use-ssh "ssh" "kahua-shell"))
             (kahua-shell-args (if (string= kahua-user-mode "")
                                   '() (list "-user" kahua-user-mode)))
             (args             (if use-ssh
                                   `(,@kahua-ssh-opts
                                     ,(if (string= user "")
										  host (concat user "@" host))
                                     ,"kahua-shell"
                                     ,@kahua-shell-args)
                                 kahua-shell-args)))
        (set-buffer (apply 'make-comint "scheme" program nil args))
        (inferior-scheme-mode)))
  (setq scheme-program-name "kahua-shell")
  (setq scheme-buffer "*scheme*")
  (pop-to-buffer "*scheme*")
  )

(provide 'kahua-shell)

;; Local variables:
;; mode: emacs-lisp
;; end:
